{"name": "test_user_login[qa.ajax.app.automation@gmail.com-qa_automation_password-True]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: A new session could not be created. Details: 'udid' must be of type string\nStacktrace:\nSessionNotCreatedError: A new session could not be created. Details: 'udid' must be of type string\n    at AndroidUiautomator2Driver.createSession (/opt/homebrew/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/driver.ts:298:13)\n    at AndroidUiautomator2Driver.createSession (/Users/ilonapetenko/.appium/node_modules/appium-uiautomator2-driver/lib/driver.ts:334:75)\n    at AppiumDriver.createSession (/opt/homebrew/lib/node_modules/appium/lib/appium.js:739:56)", "trace": "@pytest.fixture(scope='session')\n    def driver():\n        options = UiAutomator2Options()\n        options.load_capabilities(android_get_desired_capabilities())\n>       driver = webdriver.Remote('http://localhost:4723', options=options)\n\ntests/conftest.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv/lib/python3.12/site-packages/appium/webdriver/webdriver.py:229: in __init__\n    super().__init__(\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:205: in __init__\n    self.start_session(capabilities)\nvenv/lib/python3.12/site-packages/appium/webdriver/webdriver.py:318: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10320fa40>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"A new session could not be created. Detai...driver.ts:334:75)\\\\n    at AppiumDriver.createSession (/opt/homebrew/lib/node_modules/appium/lib/appium.js:739:56)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: A new session could not be created. Details: 'udid' must be of type string\nE       Stacktrace:\nE       SessionNotCreatedError: A new session could not be created. Details: 'udid' must be of type string\nE           at AndroidUiautomator2Driver.createSession (/opt/homebrew/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/driver.ts:298:13)\nE           at AndroidUiautomator2Driver.createSession (/Users/ilonapetenko/.appium/node_modules/appium-uiautomator2-driver/lib/driver.ts:334:75)\nE           at AppiumDriver.createSession (/opt/homebrew/lib/node_modules/appium/lib/appium.js:739:56)\n\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException"}, "parameters": [{"name": "email", "value": "'qa.ajax.app.automation@gmail.com'"}, {"name": "password", "value": "'qa_automation_password'"}, {"name": "result", "value": "True"}], "start": 1730748142486, "stop": 1730748142486, "uuid": "af064c25-352a-4266-9997-9d45837e04d1", "historyId": "3c3c895405ca2736bc019df290e5ff01", "testCaseId": "5b0ec97ba993718adac5c0c860fdc435", "fullName": "tests.login.test_login#test_user_login", "labels": [{"name": "parentSuite", "value": "tests.login"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "ilonas-MacBook-Air.local"}, {"name": "thread", "value": "22937-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.login.test_login"}]}